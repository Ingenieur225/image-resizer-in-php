public function resize($data)
    {
        if (is_file($data['file'])) {
            // On récupère la taille d'origine de l'image source
            $pictureSize = getimagesize($data['file']) ;

            // Sauvegarde des tailles originales,
            // $pictureSize_w et $pictureSize_h vont servir au calcul de la bouvelle taille,
            // c est sur ces variable que l'on fera l'otération de réduction
            $pictureSize_w = $pictureSize[0] ;
            $pictureSize_h = $pictureSize[1] ;
            
            // On sauvegarde tout de même la taille d'origine, cela va nous être
            // utile lors de l'appel à la fonction imagecopyresampled
            $orig_pictureSize_w = $pictureSize[0] ;
            $orig_pictureSize_h = $pictureSize[1] ;

            // On boucle tant que l'on est pas arrivé à une taille minimum 
            // passé en paramètre, pour être certain de ne pas aller trop loin dans
            // le redimentionnement un ratio de 0.9 est raisonable.
            while ( $pictureSize_w > $data['width'] || $pictureSize_h > $data['height'] ) {
               $pictureSize_w = 800 ;
               $pictureSize_h = 600 ;
            }

            // On créé l'image source en mémoire
            $sourceImg = imagecreatefromjpeg($data['file']);
            // et l'image de destination avec les tailles de la miniature
            $destImg   = imagecreatetruecolor($pictureSize_w, $pictureSize_h);
           
            // On appel la fonction qui va permettrre de redimentionner notre image
            imagecopyresampled( $destImg, $sourceImg,
                                0,0,0,0,
                                $pictureSize_w, $pictureSize_h,
                                $orig_pictureSize_w, $orig_pictureSize_h );

            // et on la sauve à un endroit donné en paramètre
            // imagejpeg ($destImg, $destination);

            return $destImg;
        }
    }
    
    
    
    // SECOND
    
    public function resize($data){

        // Verify parameters
        if (!isset($data['file']) || (!isset($data['width']) && !isset($data['height']))){
            $this->errors[] = 'Invalid filename or width/height!';
            return '1';
        }

        if (!isset($data['output'])){
            $this->errors[] = 'Invalid output dir!';
            return '2';
        }
        
        $data['proportional'] = (isset($data['proportional'])) ? $data['proportional'] : true;

        $data['height'] = (isset($data['height'])) ? $data['height'] : 0;
        $data['width']  = (isset($data['width']))  ? $data['width']  : 0;
        
        // if (!is_writable($data['output'])){
        //     $this->errors[] = 'Output dir is not writable!';
        //     return '3';
        // }

        if (!is_file($data['file'])){
            $this->errors[] = 'Invalid file!';
            return '4';
        }

        // if(!$this->_verifyMime($_FILES['image_1'])){
        //     $this->errors[] = 'Invalid file type!';
        //     return '5';
        // }
        
        // Validates width and height
        $width  = (isset($data['width']))  ? (int) $data['width']  : 0;
        $height = (isset($data['height'])) ? (int) $data['height'] : 0;		

        
        // Get attributes of image
        $img = getimagesize($data['file']);
        $original_width = $img[0];
        $original_height = $img[1];
        $mime = $img['mime'];

        $source = ($mime == 'image/png') ? imagecreatefrompng($data['file']) : imagecreatefromjpeg($data['file']);
        $filename = basename($data['name']);
        $output = $data['output'] . $filename;
        
        // Verify if resize it's necessary
        if (($width > $original_width || $height > $original_height) && $data['proportional'] === true){
        
            $width = $original_width;
            $height = $original_height;
        
        } else {
            
            // If width or height not defined, it's necessary calculate proportional size
            if (!($width > 0 && $height > 0)){
                
                // Verify if image is horizontal or vertical
                if ($original_height > $original_width){
                    $height = ($data['width'] > 0) ? $data['width'] : $data['height'];
                    $width  = ($height / $original_height) * $original_width;
                } else {
                    $width = ($data['height'] > 0) ? $data['height'] : $data['width']; // 1200
                    $height = ($width / $original_width) * $original_height; // 795
                }
                
            }
        
        }
        
        // Generate thumb
        $thumb = imagecreatetruecolor($width, $height);

        // Add transparency if image is png
        if ($mime == 'image/png') {
            imagealphablending($thumb, '6');
            imagesavealpha($thumb,true);
            // $transparent = imagecolorallocatealpha($thumb, 0, 0, 0, 0);
            // imagefilledrectangle($thumb, 0, 0, $width, $height, $transparent);
            $transparent = imagecolorallocate($thumb, 255, 255, 255);
            imagefill($thumb, 0, 0, $transparent);
        } 
        
        // Finish image
        imagecopyresampled($thumb, $source, 0, 0, 0, 0, $width, $height, $width, $height);
        $finishFunction = $this->_getFinishFunction($mime);
                    
        // if (false === $finishFunction) { 
        //     $this->errors[] = 'Invalid file type.';
        //     return '7';	
        // } elseif ($mime == 'image/jpeg' || $mime == 'image/pjpeg') {
        //     $finishFunction($thumb, WWW_ROOT.'image_offres/'.$output, (int) $this->jpgQuality);
        // } else {
        //     $finishFunction($thumb, WWW_ROOT.'image_offres/'.$output);
        // }
        
        return $thumb;
    }
    
    $output = $this->resize([
        'file' => $_FILES['image_1']['tmp_name'],
        'name' => $_FILES['image_1']['name'],
        'width' => 1600,
        'height' => 1200,
        'output' => time(). '_'
    ]);



// THIRD

<?php
function resizer ($source, $destination, $size, $quality=null) {
// resizer() : resize a given image
//  $source - Source image file
//  $destination - Save resized image to this one
//  $size - Single number for percentage resize
//          Array of 2 numbers for fixed width height
//  $quality - Optional image quality. JPG & WEBP = 0 to 100, PNG = 0 to 10
 
  // (A) FILE CHECKS
  // Allowed image file extensions
  $ext = strtolower(pathinfo($source)['extension']);
  if (!in_array($ext, ["bmp", "gif", "jpg", "jpeg", "png", "webp"])) {
    throw new Exception('Invalid image file type');
  }
 
  // Source image not found!
  if (!file_exists($source)) {
    throw new Exception('Source image file not found');
  }

  // (B) IMAGE DIMENSIONS
  $dimensions = getimagesize($source);
  $width = $dimensions[0];
  $height = $dimensions[1];

  if (is_array($size)) {
    $new_width = $size[0];
    $new_height = $size[1];
  } else {
    $new_width = ceil(($size/100) * $width);
    $new_height = ceil(($size/100) * $height);
  }

  // (C) RESIZE
  // Respective PHP image functions
  $fnCreate = "imagecreatefrom" . ($ext=="jpg" ? "jpeg" : $ext);
  $fnOutput = "image" . ($ext=="jpg" ? "jpeg" : $ext);

  // Image objects
  $original = $fnCreate($source);
  $resized = imagecreatetruecolor($new_width, $new_height); 

  // Transparent images only
  if ($ext=="png" || $ext=="gif") {
    imagealphablending($resized, false);
    imagesavealpha($resized, true);
    imagefilledrectangle(
      $resized, 0, 0, $new_width, $new_height,
      imagecolorallocatealpha($resized, 255, 255, 255, 127)
    );
  }

  // Copy & resize
  imagecopyresampled(
    $resized, $original, 0, 0, 0, 0, 
    $new_width, $new_height, $width, $height
  );

  // (D) OUTPUT & CLEAN UP
  if (is_numeric($quality)) {
    $fnOutput($resized, $destination, $quality);
  } else {
    $fnOutput($resized, $destination);
  }
  imagedestroy($original);
  imagedestroy($resized);
}

// EXAMPLE USAGE
// Percentage resize
resizer("Acate.jpg", "resized-A.jpg", 50);
resizer("Bdoge.png", "resized-B.png", 25);

// Fixed dimension resize + quality
resizer("Acate.jpg", "resized-AA.jpg", [200, 400], 20);
resizer("Bdoge.png", "resized-BB.png", [300, 250], 1);
